<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>артём</title>
<link>https://rtviii.xyz/blog.html</link>
<atom:link href="https://rtviii.xyz/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Sun, 04 Aug 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>3D tessellation of biomolecular cavities</title>
  <dc:creator>Artem Kushner</dc:creator>
  <dc:creator>Khanh Dao Duc</dc:creator>
  <link>https://rtviii.xyz/posts/ribosome-tunnel-new/</link>
  <description><![CDATA[ 





<section id="summary-and-background" class="level2">
<h2 class="anchored" data-anchor-id="summary-and-background">Summary and Background</h2>
<p>We present a protocol to extract the surface of a biomolecular cavity for shape analysis and molecular simulations.</p>
<p>We apply and illustrate the protocol on the ribosome structure, which contains a subcompartment known as the ribosome exit tunnel or “nascent polypeptide exit tunnel” (<strong>NPET</strong>). More details on the tunnel features and biological importance can be found in our previous works<span class="citation" data-cites="dao2018impact dao2019differences"><sup>1,2</sup></span>.</p>
<p>The protocol was designed to refine the output obtained from MOLE software<span class="citation" data-cites="sehnal2013mole"><sup>3</sup></span>, but can be applied to reconstruct a mesh on any general point cloud. Hence, we take the point-cloud of atom positions surrounding the tunnel as a point of departure.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/gkz106fig1.jpeg" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption>Illustration of the ribosome exit tunnel (from Dao Duc et al., NAR 2019)</figcaption>
</figure>
</div>
<!-- ::: {layout="[[57,70] ]"}
![PDB 8OJ0. The structure of human ribosome.](./data/8OJ0.gif){fig-alt=""}
::: -->
<!-- ![The locations of the ribosome exit tunnel and the PTC.](./data/ptc_and_tunnel_illustration.png){width=80%;fig-alt=""} -->
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Schematic representation of the protocol
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/visual_protocol.png" class="img-fluid" alt=""></p>
</div>
</div>
</div>
</section>
<section id="pointcloud-preparation-bounding-box-and-voxelization" class="level2">
<h2 class="anchored" data-anchor-id="pointcloud-preparation-bounding-box-and-voxelization">1. Pointcloud Preparation: Bounding Box and Voxelization</h2>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>atompos_to_voxel_sphere</code>: convert a 3D coordinate into a voxelized sphere
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="f102521e" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> atompos_to_voxelized_sphere(center: np.ndarray, radius: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Make sure radius reflects the size of the underlying voxel grid"""</span></span>
<span id="cb1-3">    x0, y0, z0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!------ Generate indices of a voxel cube of side 2r  around the centerpoint</span></span>
<span id="cb1-6">    x_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(</span>
<span id="cb1-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.floor(x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius)), </span>
<span id="cb1-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.ceil(x0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius)))</span>
<span id="cb1-9">    y_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(</span>
<span id="cb1-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.floor(y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius)), </span>
<span id="cb1-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.ceil(y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius)))</span>
<span id="cb1-12">    z_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>(</span>
<span id="cb1-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.floor(z0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius)), </span>
<span id="cb1-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(np.ceil(z0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius)))</span>
<span id="cb1-15"></span>
<span id="cb1-16">    indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.indices(</span>
<span id="cb1-17">        (</span>
<span id="cb1-18">            x_range.stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_range.start,</span>
<span id="cb1-19">            y_range.stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_range.start,</span>
<span id="cb1-20">            z_range.stop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> z_range.start,</span>
<span id="cb1-21">        )</span>
<span id="cb1-22">    )</span>
<span id="cb1-23"></span>
<span id="cb1-24">    indices      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> np.array([x_range.start,</span>
<span id="cb1-25">                              y_range.start,</span>
<span id="cb1-26">                              z_range.start])[:, np.newaxis, np.newaxis, np.newaxis ]</span>
<span id="cb1-27">    indices       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> indices.transpose(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-28">    indices_list  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, indices.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span>
<span id="cb1-29"></span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!------ Generate indices of a voxel cube of side 2r+2  around the centerpoint</span></span>
<span id="cb1-31">    sphere_active_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ind <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> indices_list:</span>
<span id="cb1-34">        x_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ind[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-35">        y_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ind[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-36">        z_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ind[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb1-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (x_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (y_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (z_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> z0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-38">            sphere_active_ix.append([x_, y_, z_])</span>
<span id="cb1-39"></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(sphere_active_ix)</span></code></pre></div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>index_grid</code>: populate a voxel grid (with sphered atoms)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="2f4c780a" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> index_grid(expanded_sphere_voxels: np.ndarray) :</span>
<span id="cb2-2"></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize_atom_coordinates(coordinates: np.ndarray)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[ np.ndarray, np.ndarray ]:</span>
<span id="cb2-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""@param coordinates: numpy array of shape (N,3)"""</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">        C      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coordinates</span>
<span id="cb2-7">        mean_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-8">        mean_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-9">        mean_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb2-10"></span>
<span id="cb2-11">        Cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_x</span>
<span id="cb2-12">        Cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_y</span>
<span id="cb2-13">        Cz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_z</span>
<span id="cb2-14">        </span>
<span id="cb2-15"></span>
<span id="cb2-16">        [dev_x, dev_y, dev_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(Cx), np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(Cy), np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(Cz)]</span>
<span id="cb2-17"></span>
<span id="cb2-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#! shift to positive quadrant</span></span>
<span id="cb2-19">        Cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Cx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(dev_x)</span>
<span id="cb2-20">        Cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Cy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(dev_y)</span>
<span id="cb2-21">        Cz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Cz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(dev_z)</span>
<span id="cb2-22"></span>
<span id="cb2-23">        rescaled_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(Cx, Cy, Cz)))</span>
<span id="cb2-24"></span>
<span id="cb2-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> rescaled_coords, np.array([[mean_x,mean_y,mean_z], [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>( dev_x ), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>( dev_y ), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>( dev_z )]])</span>
<span id="cb2-26"></span>
<span id="cb2-27">    normalized_sphere_cords, mean_abs_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalize_atom_coordinates(expanded_sphere_voxels)</span>
<span id="cb2-28">    voxel_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-29"></span>
<span id="cb2-30">    sphere_cords_quantized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.array(normalized_sphere_cords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> voxel_size) ).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb2-31">    max_values             <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(sphere_cords_quantized, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-32">    grid_dimensions        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-33">    vox_grid               <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(grid_dimensions)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dimension of the voxel grid is "</span>, vox_grid.shape)</span>
<span id="cb2-36"></span>
<span id="cb2-37">    vox_grid[</span>
<span id="cb2-38">        sphere_cords_quantized[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-39">        sphere_cords_quantized[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-40">        sphere_cords_quantized[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]  ] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-41"></span>
<span id="cb2-42"></span>
<span id="cb2-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ( vox_grid, grid_dimensions, mean_abs_vectors )</span></code></pre></div>
</div>
</div>
</div>
</div>
<p><strong>Bbox</strong>: There are many ways to extract a point cloud from a larger biological structure – in this case we settle for a bounding box that bounds the space between the PTC and the NPET vestibule.</p>
<div id="359c7c4a" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "bounding_box_atoms.npy" is a N,3 array of atom coordinates</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">atom_centers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bounding_box_atoms.npy"</span>) </span></code></pre></div>
</div>
<p><strong>Sphering</strong>: To make the representation of atoms slightly more physically-plausible we replace each atom-center coordinate with positions of voxels that fall within a sphere of radius <img src="https://latex.codecogs.com/png.latex?R"> around the atom’s position. This is meant to represent the atom’s van der Waals radius.</p>
<p>One could model different types of atoms (<img src="https://latex.codecogs.com/png.latex?N">,<img src="https://latex.codecogs.com/png.latex?C">,<img src="https://latex.codecogs.com/png.latex?O">,<img src="https://latex.codecogs.com/png.latex?H"> etc.) with separate radii, but taking <img src="https://latex.codecogs.com/png.latex?R=2"> proves a good enough compromise. The units are Angstrom and correspond to the coordinate system in which the structure of the ribosome is recorded.</p>
<div id="d2218a22" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">voxel_spheres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([ atompos_to_voxel_sphere(atom, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> atom <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> atom_centers ])</span></code></pre></div>
</div>
<p><strong>Voxelization &amp; Inversion</strong>: Since we are interested in the “empty space” between the atoms, we need a way to capture it. To make this possible we discretize the space by projecting the (sphered) point cloud into a voxel grid and invert the grid.</p>
<div id="eddb01e8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the grid is a binary 3D-array </span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with 1s where a normalized 3D-coordinate of an atom corresponds to the cell index and 0s elsewhere</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># by "normalized" i mean that the atom coordinates are</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># temporarily moved to the origin to decrease the size of the grid (see `index_grid` method further).</span></span>
<span id="cb5-6">initial_grid, grid_dims, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> index_grid(voxel_spheres)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The grid is inverted by changing 0-&gt;1 and 1-&gt;0</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now the atom locations are the null voxels and the empty space is active voxels</span></span>
<span id="cb5-10">inverted_grid              <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(np.where(initial_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).T</span></code></pre></div>
</div>
<p>Compare the following representation (<em>Inverted Point Cloud</em>) to the first point cloud: notice that where there previously was an active voxel is now an empty voxel and vice versa. The tubular constellation of active voxels in the center of the bounding box on this inverted grid is the tunnel “space” we are interested in.</p>
<div id="fig-cluster" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cluster-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-cluster" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-ptcloud" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-ptcloud-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.bbox_atoms.gif" class="img-fluid figure-img" data-ref-parent="fig-cluster">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-ptcloud-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Initial bounding-box point cloud
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-cluster" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-inverted" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-inverted-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.inverted_grid.gif" class="img-fluid figure-img" data-ref-parent="fig-cluster">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-inverted-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Inverted point cloud
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cluster-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Pointcloud inversion via a voxel grid.
</figcaption>
</figure>
</div>
</section>
<section id="subcloud-extraction" class="level2">
<h2 class="anchored" data-anchor-id="subcloud-extraction">2. Subcloud Extraction</h2>
<div id="dbscan_note" class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>DBSCAN_capture</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="6304793f" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DBSCAN</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DBSCAN_capture(</span>
<span id="cb6-3">    ptcloud: np.ndarray,</span>
<span id="cb6-4">    eps           ,</span>
<span id="cb6-5">    min_samples   ,</span>
<span id="cb6-6">    metric        : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"euclidean"</span>,</span>
<span id="cb6-7">): </span>
<span id="cb6-8"></span>
<span id="cb6-9">    u_EPSILON     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> eps</span>
<span id="cb6-10">    u_MIN_SAMPLES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_samples</span>
<span id="cb6-11">    u_METRIC      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metric</span>
<span id="cb6-12"></span>
<span id="cb6-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running DBSCAN on </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> points. eps=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, min_samples=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">, distance_metric=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-14">    .<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>( <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ptcloud), u_EPSILON, u_MIN_SAMPLES, u_METRIC ) ) </span>
<span id="cb6-15"></span>
<span id="cb6-16">    db     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DBSCAN(eps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>eps, min_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>min_samples, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>metric).fit(ptcloud) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- this is all you need</span></span>
<span id="cb6-17"></span>
<span id="cb6-18">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db.labels_</span>
<span id="cb6-19"></span>
<span id="cb6-20">    CLUSTERS_CONTAINER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> point, label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(ptcloud, labels):</span>
<span id="cb6-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> CLUSTERS_CONTAINER:</span>
<span id="cb6-23">            CLUSTERS_CONTAINER[label] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-24">        CLUSTERS_CONTAINER[label].append(point)</span>
<span id="cb6-25"></span>
<span id="cb6-26">    CLUSTERS_CONTAINER <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(CLUSTERS_CONTAINER.items()))</span>
<span id="cb6-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> db, CLUSTERS_CONTAINER</span></code></pre></div>
</div>
</div>
</div>
</div>
<div id="dbscan_note" class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>DBSCAN_pick_largest_cluster</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div id="08379943" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DBSCAN</span>
<span id="cb7-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> DBSCAN_pick_largest_cluster(clusters_container:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span>np.ndarray:</span>
<span id="cb7-3">    DBSCAN_CLUSTER_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> clusters_container.items():</span>
<span id="cb7-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(k) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb7-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb7-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(clusters_container[DBSCAN_CLUSTER_ID]):</span>
<span id="cb7-8">            DBSCAN_CLUSTER_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(k)</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(clusters_container[DBSCAN_CLUSTER_ID])</span></code></pre></div>
</div>
</div>
</div>
</div>
<p><strong>Clustering</strong>: Having obtained a voxelized representation of the interatomic spaces inside and around the NPET our task is now to extract <em>only the space</em> that <em>corresponds to the NPET</em>. We use <a href="https://en.wikipedia.org/wiki/DBSCAN">DBSCAN</a>.</p>
<p><code>scikit</code>’s implementation of <code>DBSCAN</code> conveniently lets us retrieve the points from the largest cluster only, which corresponds to the active voxels of NPET space (if we eyeballed our DBSCAN parameters well).</p>
<div id="1c58ccdf" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scikit.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DBSCAN</span>
<span id="cb8-2"></span>
<span id="cb8-3">_u_EPSILON, _u_MIN_SAMPLES, _u_METRIC  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'euclidian'</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">_, clusters_container   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DBSCAN_capture(inverted_grid, _u_EPSILON, _u_MIN_SAMPLES, _u_METRIC ) </span>
<span id="cb8-6">largest_cluster         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DBSCAN_pick_largest_cluster(clusters_container)</span></code></pre></div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
DBSCAN Parameters and grid size.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Our 1Å-side grid just happens to be granular enough to accomodate a “correct” separation of clusters for some empirically established values of <code>min_nbrs</code> and <code>epsilon</code> (DBSCAN parameters), where the largest cluster captures the tunnel space.</p>
<p>A possible issue here is “extraneous” clusters merging into the cluster of interest and thereby corrupting its shape. In general this occurs when there are clusters of density that are <em>close enough</em> (within <code>epsilon</code> to the main one to warrant a merge) and simultaneously <em>large enough</em> that they fulfill the <code>min_nbrs</code> parameter. Hence it might be challenging to find the combination of <code>min_nbrs</code> and <code>epsilon</code> that is <em>sensitive enough</em> to capture the main cluster completely and yet discriminating enough to not subsume any adjacent clusters.</p>
<p>In theory, a finer voxel grid (<em>finer</em> – in relationship to the initial coordinates of the general point cloud; sub-angstrom in our case) would make finding the combination of parameters specific to the dataset easier: given that the atom-sphere would be represented by a proprotionally larger number of voxels, the euclidian distance calculation between two voxels would be less sensitive to the change in <code>epsilon</code>.</p>
<p>Partioning the voxel grid further would come at a cost:</p>
<ul>
<li>you would need to rewrite the sphering method for atoms (to account for the the new voxel-size)</li>
<li>the computational cost will increase dramatically, the dataset could conceivably stop fitting into memory alltogether.</li>
</ul>
</div>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.dbscan.clusters.gif" class="img-fluid figure-img"></p>
<figcaption>Clusters identified by DBSCAN on the inverted index grid. The largest cluster corresponds to the tunnel space.</figcaption>
</figure>
</div>
<div id="dbscan_note" class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Subcloud refinement
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>I found that this first pass of DBSCAN (<code>eps</code>=<img src="https://latex.codecogs.com/png.latex?5.5">, <code>min_nbrs</code>=<img src="https://latex.codecogs.com/png.latex?600">) successfully identifies the largest cluster with the tunnel but generally happens to be conservative in the amount of points that are merged into it. That is, there are still redundant points in this cluster that would make the eventual surface reconstruction spatially overlap with the rRNA and protiens. To “sharpen” this cluster we apply DBSCAN only to its sub-pointcloud and push the <code>eps</code> distance down to <img src="https://latex.codecogs.com/png.latex?3"> and <code>min_nbrs</code> to <img src="https://latex.codecogs.com/png.latex?123"> (again, “empirically established” values), which happens to be about the lowest parameter values at which any clusters form. This sharpened cluster is what the tesselation (surface reconstruction) will be performed on.</p>
<div id="fig-cluster" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-cluster-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-cluster" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-trimmed" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-trimmed-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.ptcloud_trimmed.gif" class="img-fluid figure-img" data-ref-parent="fig-cluster">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-trimmed-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Largest DBSCAN cluster (trimmed from the vestibule side).
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-cluster" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-trimmed-sharpened" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-trimmed-sharpened-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.ptcloud_trimmed_sharpened.gif" class="img-fluid figure-img" data-ref-parent="fig-cluster">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-trimmed-sharpened-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Cluster refinement: DBSCAN{e=3,mn=123} result (marine blue) on the largest cluster of DBSCAN{e=5.5,mn=600} (gray)
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-cluster-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;2: Second pass of DBSCAN sharpens the cluster to peel off the outer layer of redundant points.
</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="tessellation" class="level2">
<h2 class="anchored" data-anchor-id="tessellation">3. Tessellation</h2>
<div id="ptcloud_convex_hull_points" class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>ptcloud_convex_hull_points</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Surface points can be extracted by creating an alpha shape over the point cloud and taking only the points that belong to the alpha surface.</p>
<div id="20bad453" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyvista <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pv</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> open3d <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> o3d</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ptcloud_convex_hull_points(pointcloud: np.ndarray, ALPHA:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, TOLERANCE:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> pointcloud <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb9-7">    cloud       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pv.PolyData(pointcloud)</span>
<span id="cb9-8">    grid        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cloud.delaunay_3d(alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ALPHA, tol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TOLERANCE, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, progress_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-9">    convex_hull <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid.extract_surface().cast_to_pointset()</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> convex_hull.points</span></code></pre></div>
</div>
<p>One could content themselves with the alpha shape representation of the NPET geometry and stop here, but it’s easy to notice that the vertice of the polygon (red dots) are distributed unevenly over the surface. This is likely to introduce artifacts and instabilities into further simulations.</p>
<div id="fig-alpha" class="quarto-layout-panel">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-alpha-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<div class="quarto-layout-row">
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-alpha" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-alpha-shape" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-alpha-shape-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.alphashape.gif" class="img-fluid figure-img" data-ref-parent="fig-alpha">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-alpha-shape-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(a) Alpha-shape over the pointcloud
</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell-subref quarto-layout-cell" data-ref-parent="fig-alpha" style="flex-basis: 50.0%;justify-content: flex-start;">
<div id="fig-surf-pts" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-subfloat-fig figure">
<div aria-describedby="fig-surf-pts-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.surface_pts.gif" class="img-fluid figure-img" data-ref-parent="fig-alpha">
</div>
<figcaption class="quarto-float-caption-bottom quarto-subfloat-caption quarto-subfloat-fig" id="fig-surf-pts-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
(b) Surface points of the point cloud
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-alpha-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;3: Alpha shape provides a way to identify surface points.
</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div id="estimate_normals" class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>estimate_normals</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Normal estimation is done via rolling a tangent plane over the surface points.</p>
<div id="1c6b2b54" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyvista <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pv</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> open3d <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> o3d</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> estimate_normals(convex_hull_surface_pts: np.ndarray, kdtree_radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, kdtree_max_nn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, correction_tangent_planes_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): </span>
<span id="cb10-6">    pcd        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o3d.geometry.PointCloud()</span>
<span id="cb10-7">    pcd.points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o3d.utility.Vector3dVector(convex_hull_surface_pts)</span>
<span id="cb10-8"></span>
<span id="cb10-9">    pcd.estimate_normals(search_param<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>o3d.geometry.KDTreeSearchParamHybrid(radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kdtree_radius, max_nn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kdtree_max_nn) )</span>
<span id="cb10-10">    pcd.orient_normals_consistent_tangent_plane(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>correction_tangent_planes_n)</span>
<span id="cb10-11"></span>
<span id="cb10-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pcd</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0_normals.gif" class="img-fluid figure-img"></p>
<figcaption>Normals’ orientations are depicted as vectors(black) on each datapoint.</figcaption>
</figure>
</div>
</div>
</div>
</div>
<div id="apply_poisson_recon" class="callout callout-style-default callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<code>apply_poisson_recon</code>
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The source is available at <a href="https://github.com/mkazhdan/PoissonRecon">https://github.com/mkazhdan/PoissonRecon</a>. For programmability we connect the binary to the pipeline by wrapping it in a python <code>subprocess</code> but one can of course use the binary directly.</p>
<p>The output of the binary is a binary <code>.ply</code> (Stanford Triangle Format) file. For purposes of distribution we also produce an <code>asciii</code>-encoded version of this <code>.ply</code> file side-by-side: some geometry packages are only able to parse the <code>ascii</code> version.</p>
<div id="2e3f0c58" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> apply_poisson_reconstruction(surf_estimated_ptcloud_path: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, recon_depth:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, recon_pt_weight:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb11-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plyfile</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The documentation can be found at https://www.cs.jhu.edu/~misha/Code/PoissonRecon/Version16.04/ in "PoissonRecon" binary</span></span>
<span id="cb11-4">    command <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb11-5">        POISSON_RECON_BIN,</span>
<span id="cb11-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--in"</span>,</span>
<span id="cb11-7">        surf_estimated_ptcloud_path,</span>
<span id="cb11-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--out"</span>,</span>
<span id="cb11-9">        output_path,</span>
<span id="cb11-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--depth"</span>,</span>
<span id="cb11-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(recon_depth),</span>
<span id="cb11-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--pointWeight"</span>,</span>
<span id="cb11-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(recon_pt_weight),</span>
<span id="cb11-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--threads 8"</span></span>
<span id="cb11-15">    ]</span>
<span id="cb11-16">    process <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> subprocess.run(command, capture_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> process.returncode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;&gt;PoissonRecon executed successfully."</span>)</span>
<span id="cb11-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;&gt;Wrote </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(output_path))</span>
<span id="cb11-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the plyfile to asciii</span></span>
<span id="cb11-21">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plyfile.PlyData.read(output_path)</span>
<span id="cb11-22">        data.text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb11-23">        ascii_duplicate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output_path.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_ascii.ply"</span></span>
<span id="cb11-24">        data.write(ascii_duplicate)</span>
<span id="cb11-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;&gt;Wrote </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(ascii_duplicate))</span>
<span id="cb11-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb11-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&gt;&gt;Error:"</span>, process.stderr)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/4UG0.reconstruction.gif" class="img-fluid figure-img"></p>
<figcaption>The final NPET surface reconstruction</figcaption>
</figure>
</div>
</div>
</div>
</div>
<p>Now, having refined the largest DBSCAN cluster, we have a pointcloud which faithfully represent the tunnel geometry. To create a watertight mesh from this point cloud we need to prepare the dataset:</p>
<ul>
<li>retrieve only the “surface” points from the pointcloud</li>
<li>estimate <em>normals</em> on the surface points (establish data orientation)</li>
</ul>
<div id="80853f12" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">d3d_alpha, d3d_tol     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-2"></span>
<span id="cb12-3">surface_pts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ptcloud_convex_hull_points(coordinates_in_the_original_frame, d3d_alpha,d3d_tol)</span>
<span id="cb12-4">pointcloud  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> estimate_normals(surface_pts, kdtree_radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, kdtree_max_nn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, correction_tangent_planes_n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<p>The dataset is now ready for surface reconstruction. We reach for Poisson surface reconstruction<span class="citation" data-cites="kazhdan2006poisson"><sup>4</sup></span> by <em>Kazhdan</em> and <em>Hoppe</em>, a de facto standard in the field.</p>
<div id="b5bb6e3e" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">PR_depth , PR_ptweight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb13-2">apply_poisson_recon(pointcloud, recon_depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PR_depth, recon_pt_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PR_ptweight)</span></code></pre></div>
</div>
</section>
<section id="result" class="level2">
<h2 class="anchored" data-anchor-id="result">Result</h2>
<p>What you are left with is a smooth polygonal mesh in the <code>.ply</code> format. Below is the illustration of the fidelity of the representation. Folds and depressions can clearly be seen engendered by three proteins surrounding parts of the tunnel (uL22 <em>yellow</em>, uL4 <em>light blue</em> and eL39 <em>magenta</em>). rRNA is not shown.<span class="citation" data-cites="zhou2018open3d"><sup>6</sup></span></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://rtviii.xyz/posts/ribosome-tunnel-new/data/tunnel_proteins.gif" class="img-fluid figure-img"></p>
<figcaption>The NPET mesh surrounded by by three ribosome proteins</figcaption>
</figure>
</div>
</section>
<section id="references" class="level2">




</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body" data-entry-spacing="0" data-line-spacing="2">
<div id="ref-dao2018impact" class="csl-entry">
<div class="csl-left-margin">1. </div><div class="csl-right-inline">Dao Duc, K. &amp; Song, Y. S. The impact of ribosomal interference, codon usage, and exit tunnel interactions on translation elongation rate variation. <em>PLoS genetics</em> <strong>14</strong>, e1007166 (2018).</div>
</div>
<div id="ref-dao2019differences" class="csl-entry">
<div class="csl-left-margin">2. </div><div class="csl-right-inline">Dao Duc, K., Batra, S. S., Bhattacharya, N., Cate, J. H. &amp; Song, Y. S. Differences in the path to exit the ribosome across the three domains of life. <em>Nucleic acids research</em> <strong>47</strong>, 4198–4210 (2019).</div>
</div>
<div id="ref-sehnal2013mole" class="csl-entry">
<div class="csl-left-margin">3. </div><div class="csl-right-inline">Sehnal, D. <em>et al.</em> MOLE 2.0: Advanced approach for analysis of biomacromolecular channels. <em>Journal of cheminformatics</em> <strong>5</strong>, 1–13 (2013).</div>
</div>
<div id="ref-kazhdan2006poisson" class="csl-entry">
<div class="csl-left-margin">4. </div><div class="csl-right-inline">Kazhdan, M., Bolitho, M. &amp; Hoppe, H. Poisson surface reconstruction. in <em>Proceedings of the fourth eurographics symposium on geometry processing</em> vol. 7 (2006).</div>
</div>
<div id="ref-zhou2018open3d" class="csl-entry">
<div class="csl-left-margin">5. </div><div class="csl-right-inline">Zhou, Q.-Y., Park, J. &amp; Koltun, V. Open3D: A modern library for 3D data processing. <em>arXiv preprint arXiv:1801.09847</em> (2018).</div>
</div>
<div id="ref-sullivan2019pyvista" class="csl-entry">
<div class="csl-left-margin">6. </div><div class="csl-right-inline">Sullivan, C. &amp; Kaszynski, A. PyVista: 3D plotting and mesh analysis through a streamlined interface for the visualization toolkit (VTK). <em>Journal of Open Source Software</em> <strong>4</strong>, 1450 (2019).</div>
</div>
</div></section><section class="quarto-appendix-contents" id="quarto-reuse"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div class="quarto-appendix-contents"><div><a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a></div></div></section><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kushner2024,
  author = {Kushner, Artem and Dao Duc, Khanh},
  title = {3D Tessellation of Biomolecular Cavities},
  date = {2024-08-04},
  url = {https://rtviii.xyz/posts/ribosome-tunnel-new/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kushner2024" class="csl-entry quarto-appendix-citeas">
<div class="">Kushner, A. &amp; Dao Duc, K. 3D tessellation
of biomolecular cavities. <a href="https://rtviii.xyz/posts/ribosome-tunnel-new/">https://rtviii.xyz/posts/ribosome-tunnel-new/</a>
(2024).</div>
</div></div></section></div> ]]></description>
  <category>cryo-EM</category>
  <guid>https://rtviii.xyz/posts/ribosome-tunnel-new/</guid>
  <pubDate>Sun, 04 Aug 2024 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
